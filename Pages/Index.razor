@page "/"
@using System.Net.Http

<div class="text-center">
    <h2 class="display-4">Paste names into the textboxes below</h2>
    Your Character Name:<br />
    <input @bind="MainChar" class="form-control bg-dark text-light" required="required" spellcheck="false" pattern="[A-Za-z0-9 ]+" title="Please only enter valid character names" /><br />
    Characters to compare:<br />
    <textarea @bind="CharPaste" class="form-control bg-dark text-light" rows="10" required="required" spellcheck="false" pattern="[A-Za-z0-9 ]+" title="Please only enter valid character names"></textarea>
</div>
<button class="btn btn-primary btn-lg" @onclick="CheckCharacters">Submit</button>
@if (Progress != 0)
{
    <br />
    <div class="progress">
        <div class="progress-bar" role="progressbar" style="width: @Progress%;" aria-valuenow="@Progress" aria-valuemin="0" aria-valuemax="100">@Progress%</div>
    </div>
}
@if (connections != null)
{
    <table class="table">
        <thead>
        <tr>
            <th scope="col"></th>
            <th scope="col">Name</th>
            <th scope="col">Entity</th>
            <th scope="col">Overlap</th>
        </tr>
        </thead>
        <tbody>
        @foreach (CharacterConnection connection in connections)
        {
            <tr>
                <td>
                    <img src="https://images.evetech.net/characters/@connection.charID/portrait?size=64" style="height: 64px; width: 64px;" />
                    <img src="https://images.evetech.net/corporations/@connection.entityID/logo?size=64" style="height: 64px; width: 64px;" />
                </td>
                <td>@connection.charName</td>
                <td>@connection.entityName</td>
                <td>@connection.overlapStart.ToString("dd-MMM-yyy") To 
                    @if (connection.overlapEnd != DateTime.MaxValue)
                    {
                        @connection.overlapEnd.ToString("dd-MMM-yyy")
                    }
                    else { @DateTime.UtcNow.ToString("dd-MMM-yyy") }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code
{
    private string MainChar;
    private string CharPaste;
    private int Progress = 0;
    private List<CharacterConnection> connections;
    static HttpClient httpClient = new();

    public async Task CheckCharacters(MouseEventArgs e)
    {
        try
        {
            //Progress bar prep
            Progress = 0;
            var charList = CharPaste.Replace(MainChar, "").Split(new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
            var currentCount = 0;
            var totalCount = charList.Length;
            //Process Main Character
            var mainCharacter = new Character { charName = MainChar };
            await mainCharacter.GetCharID();
            await mainCharacter.GetCorps();
            //Process Character List
            var pastedCharacters = new List<Character>();
            foreach(var name in charList)
            {
                var character = new Character { charName = name };
                await character.GetCharID();
                await character.GetCorps();
                pastedCharacters.Add(character);
                //Count Progress
                currentCount++;
                Progress = (int)Math.Round(((decimal)currentCount / (decimal)totalCount) * 100);
                Console.WriteLine(Progress+"%");
                StateHasChanged();
            }
            connections = mainCharacter.FindConnections(pastedCharacters).OrderByDescending(c => c.overlapStart).ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    public class Character
    {
        public string charName { get; set; }
        public int charID { get; set; }
        public List<Corp> Corps { get; set; }
        public List<Alliance> Alliances { get; set; }

        public async Task GetCharID()
        {
            //Get Character ID
            try
            {
                var charSearchJson = await httpClient.GetFromJsonAsync<ESISearch>("https://esi.evetech.net/latest/search/?categories=character&datasource=tranquility&language=en-us&search=" + this.charName + "&strict=true");
                this.charID = int.Parse(charSearchJson.character[0].ToString());
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                this.charID = 3004033;
            }
        }
        public async Task GetCorps()
        {
            //Get history list
            var corpHistoryJson = await httpClient.GetFromJsonAsync<List<ESICorpHistory>>("https://esi.evetech.net/latest/characters/" + this.charID + "/corporationhistory/?datasource=tranquility");
            //Process into Corp class
            this.Corps = new List<Corp>();
            foreach(var history in corpHistoryJson)
            {
                //corp name
                var corpNameSearch = await httpClient.GetFromJsonAsync<ESICorp>("https://esi.evetech.net/latest/corporations/" + history.corporation_id + "/?datasource=tranquility");
                var corp = new Corp
                {
                    corpID = history.corporation_id,
                    corpName = corpNameSearch.name,
                    startDate = DateTime.Parse(history.start_date)
                };
                Corps.Add(corp);
            }
            //Populate end dates
            Corp previousCorp = null;
            foreach (var c in Corps.OrderByDescending(c => c.startDate))
            {
                if (previousCorp != null)
                {
                    c.endDate = previousCorp.startDate;
                }
                else
                {
                    c.endDate = DateTime.MaxValue;
                }
                previousCorp = c;
            }
        }

        public List<CharacterConnection> FindConnections(List<Character> pastedCharacters)
        {
            var Connections = new List<CharacterConnection>();
            //Define rookie corps to ignore

            var rookieCorps = new string[] { "Hedion University", "Imperial Academy", "Royal Amarr Institute", "School of Applied Knowledge", "Science and Trade Institute", "State War Academy", "Center for Advanced Studies", "Federal Navy Academy", "University of Caille", "Pator Tech School", "Republic Military School", "Republic University", "Viziam", "Ministry of War", "Imperial Shipment", "Perkone", "Caldari Provisions", "Deep Core Mining Inc.", "The Scope", "Aliastra", "Garoun Investment Bank", "Brutor Tribe", "Sebiestor Tribe", "Native Freshfood", "Ministry of Internal Order", "Expert Distribution", "Impetus", "Brutor Tribe", "Amarr Imperial Navy", "Ytiri", "Federal Intelligence Office", "Republic Security Services", "Dominations", "Guristas" };
            //Loop Chars corp history
            foreach (var corp in this.Corps.Where(c => !rookieCorps.Contains(c.corpName)))
            {
                //get pasted chars who share that corp at same time
                foreach (var match in pastedCharacters.Where(p => p.Corps.Count(c => c.corpID == corp.corpID && c.startDate < corp.endDate && corp.startDate < c.endDate) > 0))
                {
                    var matchEntry = match.Corps.FirstOrDefault(c => c.corpID == corp.corpID && c.startDate < corp.endDate && corp.startDate < c.endDate);
                    //Calculate overlap dates
                    DateTime entityStart;
                    DateTime entityEnd;
                    if (matchEntry.startDate > corp.startDate) { entityStart = matchEntry.startDate; } else { entityStart = corp.startDate; }
                    if (matchEntry.endDate > corp.endDate) { entityEnd = corp.endDate; } else { entityEnd = matchEntry.endDate; }
                    var connection = new CharacterConnection()
                    {
                        charID = match.charID,
                        charName = match.charName,
                        entityID = corp.corpID,
                        entityName = corp.corpName,
                        overlapStart = entityStart,
                        overlapEnd = entityEnd
                    };
                    Connections.Add(connection);
                }
            }
            return Connections;
        }
    }
    public class Corp
    {
        public string corpName { get; set; }
        public int corpID { get; set; }
        public DateTime startDate { get; set; }
        public DateTime endDate { get; set; }
    }
    public class Alliance
    {
        public string allianceName { get; set; }
        public int allianceID { get; set; }
        public DateTime startDate { get; set; }
        public DateTime endDate { get; set; }
    }
    public class CharacterConnection
    {
        public string charName { get; set; }
        public int charID { get; set; }
        public string entityName { get; set; }
        public int entityID { get; set; }
        public DateTime overlapStart { get; set; }
        public DateTime overlapEnd { get; set; }
    }
    public class ESISearch
    {
        public long[] alliance { get; set; }
        public long[] character { get; set; }
        public long[] corporation { get; set; }
    }
    public class ESICorp
    {
        public int alliance_id { get; set; }
        public int ceo_id { get; set; }
        public int creator_id { get; set; }
        public string date_founded { get; set; }
        public string description { get; set; }
        public int faction_id { get; set; }
        public int home_station_id { get; set; }
        public int member_count { get; set; }
        public string name { get; set; }
        public long shares { get; set; }
        public decimal tax_rate { get; set; }
        public string ticker { get; set; }
        public string url { get; set; }
        public bool war_eligible { get; set; }
    }
    public class ESICorpHistory
    {
        public int corporation_id { get; set; }
        public bool is_deleted { get; set; }
        public int record_id { get; set; }
        public string start_date { get; set; }
    }
}
